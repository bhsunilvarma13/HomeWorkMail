generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum plan {
  FREE
  PRO
}

enum role {
  USER
  ADMIN
  OWNER
  TEACHER
  STUDENT
}

model Tenant {
  id                  String               @id @default(dbgenerated("concat('tnt_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  name                String?              @unique
  plan                plan                 @default(FREE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  classes             Class[]
  tenantUserRelations TenantUserRelation[]
}

model TenantUserRelation {
  id        String   @id @default(dbgenerated("concat('tus_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  role      role     @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                  String               @id @default(dbgenerated("concat('usr_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  email               String               @unique
  name                String?
  avatar              String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenantUserRelations TenantUserRelation[]
  classUserRelations  ClassUserRelation[]
}

model Class {
  id                 String              @id @default(dbgenerated("concat('cls_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  name               String
  inviteKey          String              @unique @default(dbgenerated("replace((gen_random_uuid())::text, '-'::text, ''::text)")) @db.Text
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  classUserRelations ClassUserRelation[]
}

model ClassUserRelation {
  id        String   @id @default(dbgenerated("concat('cur_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  role      role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}
