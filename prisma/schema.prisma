generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum plan {
  FREE
  PRO
}

enum role {
  USER
  ADMIN
  OWNER
  TEACHER
  STUDENT
}

enum questionType {
  MULTIPLE_CHOICE
  SHORT_ANSWER
  LONG_ANSWER
  FILE_UPLOAD
  TRUE_FALSE
  ESSAY
  FILL_IN_THE_BLANK
  MULTIPLE_RESPONSE
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
}

model Tenant {
  id                  String               @id @default(dbgenerated("concat('tnt_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  name                String?              @unique
  plan                plan                 @default(FREE)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  classes             Class[]
  tenantUserRelations TenantUserRelation[]
}

model TenantUserRelation {
  id        String   @id @default(dbgenerated("concat('tus_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  role      role     @default(OWNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id                   String                    @id @default(dbgenerated("concat('usr_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  email                String                    @unique
  name                 String?
  avatar               String?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  tenantUserRelations  TenantUserRelation[]
  classUserRelations   ClassUserRelation[]
  homeworkUserRelation HomeworkStudentRelation[]
}

model Class {
  id                 String              @id @default(dbgenerated("concat('cls_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  name               String
  inviteKey          String              @unique @default(dbgenerated("replace((gen_random_uuid())::text, '-'::text, ''::text)")) @db.Text
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tenantId           String
  tenant             Tenant              @relation(fields: [tenantId], references: [id])
  classUserRelations ClassUserRelation[]
  homeworks          Homework[]
}

model ClassUserRelation {
  id        String   @id @default(dbgenerated("concat('cur_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  role      role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  classId   String
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model Homework {
  id                   String                    @id @default(dbgenerated("concat('hwm_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  heading              String
  deadline             DateTime?
  shown                Boolean                   @default(false)
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  classId              String?
  class                Class?                    @relation(fields: [classId], references: [id], onDelete: Cascade)
  sections             Section[]
  homeworkUserRelation HomeworkStudentRelation[]
}

model HomeworkStudentRelation {
  id         String   @id @default(dbgenerated("concat('hur_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  homeworkId String
  homework   Homework @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
}

model Section {
  id          String     @id @default(dbgenerated("concat('sec_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  heading     String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  homeworkId  String
  homework    Homework   @relation(fields: [homeworkId], references: [id], onDelete: Cascade)
  questions   Question[]
}

model Question {
  id           String       @id @default(dbgenerated("concat('qst_', replace((gen_random_uuid())::text, '-'::text, ''::text))")) @db.Text
  question     String
  description  String
  questionType questionType
  options      String[]
  answer       String?
  fileID       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  sectionId    String
  section      Section      @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}
